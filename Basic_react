// what is react?
// * it is a library for creating user interfaces.
// * most people think it is a framework but it is libraray.


// * react is a librarary and in which you can write html and js in a same file and it has component based structure  means we use componenet structe in react.
// react use component based structure or react use functional components.

// why we use react?
// * because we have flexibility to  create  multiple script files with react.

// how to built react application? 
// there are diffrent types of tools to built a react application.
// most commonly use:- CRA(create react app) and vite

//* Data flow is uni-direction in react=> from parent to child


// what is react-router-dom?
// React Router DOM is a library that helps you manage navigation in a React application.
// Definition: React Router DOM is a tool that allows you to create and manage different pages in a React app without refreshing the entire page.
// Purpose: It helps you set up routes (or paths) so users can navigate to different parts of your application easily.

// what is a virtual dom?
// virtual dom is just a copy of a originial dom.
// if we change in original dom like div so whole dom will be re-render. render means to show.

// react use a virtual dom , in virtual dom , we have exactly copy of orignal dom, and if we change in virtual 
// dom like div so what happens, react compare this virtual dom with original dom, and if it seems differnet so
//  it will replace orignial dom with virtual dom.(virtual dom also called diffing algorithm )    
//  * it is feature of react

// what is differnce between actual dom and virtual dom?
// Real dom is the actual structure represented on the UI while virtual dom is the memory representation of the same.

// Actual DOM (Document Object Model):
// Definition:The actual DOM is the real structure of a webpage. It represents all the HTML elements on the page.
// Key Point: When you change something in the actual DOM, the browser has to reload or update the whole page, which can be slow.
// Virtual DOM:
// Definition: The virtual DOM is a fast, in-memory version of the actual DOM. It’s like a copy that React uses to keep track of changes.
// Key Point: When you make changes, React updates the virtual DOM first, then figures out what needs to change in the actual DOM. This makes updates quicker and smoother.

//  ** how to create react app?
//  using command:-npx create-react-app inital

//  ** hum projet ke andar jane ke liye konsi command use karte hai?
// or which command we use to go inside the project?
//  cd .\inital\ 
// and then:- npm start

// * src directory means source directory. ye source folder hota hai this folder contain all the source code of react application.

// <App/>:-it is component
// <react.strictmode>:-it is a rule by default(react runs in a strict mode)

// <!-- import means:-lana -->to bring
// <!-- export means:- bhejna -->to send
// <!-- root means node -->



// return keyword:- it is use to return something out of a function.

// * every component in which you are using return keyword will display its content on UI.

//  basic first rule of react:-
// * we will write any js code before the return keyword.
//  //jo bhi humai js likhna hai wo hum return keyword ke phle likhege,and we will write whatever we want   render on html page after the return keyword.
//  // rule is such that ki you have to write the name of the functional componenet in the first letter capital letter.
// * after returm keyword  html and return before js

//  components folder:-this folder content all the resuable UI element. 

// public folder:- it contains, index.html, this file which runs first on the browser.

// npm(node package manager):- npm is open source.we can install different-different packages.

// node moduls- jo bhi package hum install krege ,package means some pack that is providing some features.
// so it will go in node module.

// pacakage.json:-whatever you are using inside your project like all the dependence and all the library that you are using like script
// * package. json file is a file that contains meta data about your poroject or list of dependences.

// pacakage-lock.json:-it use for version control.

// git ignore-yaha hum wo cheje likhte hai jo hum github pr push nhi karna chahate hai

// github:-github is a control version tool 

// what is jsx?
// JSX (JavaScript XML) is a syntax extension for JavaScript used in React.
// Definition: JSX lets you write HTML-like code directly within your JavaScript. It looks similar to HTML but is actually a part of JavaScript.

// <!-- ==================================================================================== -->
// import React from "react";
// function Header(){
//     return <div>
//         <h1>Header</h1>
//     </div>
// }
// export default Header;

// //ismai hum noramal import krwate hai like :- import from Header './components/Header';


// import React from "react";
// export function Body(){
//     return(
//         <div 
//         style={
//             {
//                 width:"100%",
//                 height:"50vh",
//                 backgroundColor:"red",
//             }
//         }>
//         <h1>Body</h1>
//     </div>

//     ) 
// }
// // ismai hum export default agar use nhi krege to humai aese likhna hoga:-
// import {Body} from './components/Body';

// install prettier extension

// * Every element is object in dom.

// * axios library command:- npm i axios

// react mai hum html and js ek file mai likh skte hai



//* react ka ek aur feature hota hai, the flow of data is a unique additional way.

// a component is never re-rendering bases on props. if we want to re-render then we have to use useEffect hook.


// * when we are pulling code or cloning code from github so always we have to install npm using this command:-npm install
// if we will not do,so that dependencies will not come and that code will not run that library will not be there.


// what are the components?
// componnets are independent and resuable bits of code.
// Definition: Components are reusable pieces of code that return a part of the user interface (UI). 
// They can be thought of as small, self-contained parts of a web page.

// Types: There are two main types of components:
// Functional Components:-Functional components are the components that are created using functions
// Definition: Functional components are simple JavaScript functions that return JSX (the UI). 
// They are often used for presenting data or rendering UI elements.
// Characteristics:
// Easier to Write: They are generally shorter and easier to understand.
// Stateless: By default, they do not manage state (though they can use hooks to manage state in modern React).
// Hooks: With React hooks, you can add state and other features to functional components.
// Class Components:Definition: Class components are more complex and are defined using ES6 class syntax. 
// They can manage their own state and lifecycle methods.


// Constructor:- constructor is a method used to initalize an object state in a class.


// Props:-props it is a object, it is like a parameter.
// * props are the arguments that are passed to the component from the patrent component.
// * props are immutable, you can not change the value of the props in the child component.

// PROPS are used to pass the data from the parent component to the child component.

// what is the differnce between usesate and props?

// * Props (short for properties) are a way to pass data from one component to another, 
// typically from a parent component to a child component.
// Props are immutable; once set, they cannot be changed by the child component.
// They enable a unidirectional data flow (from parent to child), 
// promoting better organization and predictability in your application.

// The state in a React component is an object that holds information about the components current situation or data.
// Definition: State is a way to manage dynamic data within a component.
//  It represents data that can change over time, and changes to state can trigger re-renders of the component.
//  when the states changes the comonent will re-render.
//  Mutable: State can be changed within the component, typically using the setState method (in class components) or the useState hook (in functional components).
//  Local to Component: State is local to the component that defines it, meaning it cannot be accessed directly by other components.


// Props drilling?
// Props drilling in React refers to the process of passing data (props) from a parent component down to a deeply nested child component through multiple levels of components,While it works, it can make your code complex and harder to manage.
// Props drilling happens when you pass props through several layers of components to reach a specific child component that needs the data.
// Example Scenario: If you have a component hierarchy where a grandparent component needs to pass data to a grandchild component, 
// it must go through the parent component, even if the parent doesn’t need the data itself.
// Problems with Props Drilling:
// Complexity: It can make your code harder to read and maintain, especially if many layers exist.
// Unnecessary Props: Intermediate components may receive props they don’t actually use, which can clutter their code.
// Solutions:
// To avoid props drilling, you can use:

// Context API: Allows you to share data without passing props through every level.
// State Management Libraries: Such as Redux, which can manage state across the application without needing to drill props.

// How do you update a state:-using setState



















//Hooks=> Are functions that let you use state and other React features in functional components
// hooks:-hooks are nothing but functions,that allows to use state means, all the features of react that can be used in functional components.

// these number of hooks:-
// useState- state management
// useEffect-side effects
// useContext-state management
//  useReducer-state management
// useRef-to access the dom elements,prevent unnecessary re-render.
// useMemo-optimization
// useCallback-optimization
// custom hooks:-

// const [count, setcount] = useState(props); is line mai humne use state ko destructure kiya hua hai,
// useState humko 2 cheeje return karta hai, first-State, it is an internal object and secone one is function.and that is use to modify state.
// setCount ki help se hum ek state ko update kar skte hai
// setCount-it is used to modify of count

// destructuring ex:=
// const [a,b]=[1,2]
// useEffect:-ye 2 parameter leta hai , first one callback function and second one as a dependence-


// Usestate:-usestate is a hook, that is used to add the state in the functional components.
// useState accepts an initial state and returns two values:
// 1.The current state.
// 2. A function that updates the state.
// and  it gives to us two things, one is state ( state is an internal object) and second one is function, that function modify to that state.
// * usestate is a function that return an array.
// * the first element of the array is the state and the second element is the function, that is used to update the data.
// *const [count, setcount] = useState(props);we have destructured the usestate hook.
// * we can update the state using setState method.





{/* <></>:-it called react fragnent */}

// hamara return single container or div return krta hai

// spread operator is used to destructure

// prevent default behavior:- iske prevent behaviour ko change krdo

// Routing in raect:-it means we can navigate between differn pages, which is called routing.
// mtlb hum navigate kar skte hai different-different page ke bich mai, use routing kahte hai=> react own react router dom for routing


// js mai routing ke liye:-anchor tag use and window.location.href

// react router dom is an library. 

// for install libraray:-
// npm install or(i) react-router-dom

// component of react-router-dom:-this is a simple component,and it manages navigation,we need to use it, where our root element is present.
// * browser router:-ye ek simple componenet hota hai, and navigation ko manage krne ka kaam krta hai , ise hume waha
// use karna hai jaha hamara root element present hai

// render and return method, they do not support multiple elements, so we have to write single single.

// indexe.js mai hum browserrouter mai app ko wrap krte hai

// routes hamare single single rout ka  collection hota hai
// routes means collective routes
// rout means a single rout

// routes attribute:-
// Path

// element:-ismai opening and closing hota hai 
// example:-<Routes></Routes>
// componeent:-ismai opening closing nhi hota hai ye self closing hota hai
// example:-<Route/>
 

// localhost:3000:-default path

// we use link tag intead of anchor tag in react.

// useNavigate hook:-using this hook we can routing conditionally
// you can also  handle routing by using navigate hook conditionally

// Broserrouter:-it is wraper kind of thing in which we have to whole application to access the feature of react router dom.

// routes:-ismai hum rout ka collection rkhte hai , jo hamre pas different different rout collection hote hai  , unko hum routes ke andar rkhte hai
// rout:-single rout jis pr hum path define karke bta skte hai , kaha pr  jane  pr  konsa element render hoga
// iske pas 2 attribute hote hai...path, element
// path attribute:-ye yah btata hai ki property ka path konsa hai
// element attribute:-ye yah btata hai kiproperty mai konsa element render hona chahiye

// link tag hamara anchor tag ki tarah kaam krta hai
// link tag mai to property hoti hai as well anchor tag mai href property hoti hai
// to -property ka use krke hum different different pages par absolute or relative url ka use kake ja skte hai

//  async:-it is a keyword that is use before function name , means hamara function asyncronous ho jaye
//  await:-it  is use only  inside async funstion when we are waiting for something to return




// what is differnce between framework and library?

// Framework:A framework is a set of pre-written code that provides a structure for developing software applications or
// we can say in easy way,It guides you on how to build your application.
// * A framework is more like a skeleton or structure that you build your application around..
// * The framework calls your code at certain points, so it controls more of the programs flow.
// When we say that "the framework calls your code at certain points," it means that the framework has a predefined structure and flow. 

// Library:A library , on other hand,is collection of pre-written code that can be used to perform specific task.
// A library is a collection of code that you can use to perform specific tasks.
// You call the library when you need it, like borrowing a book from a library.
// You control the flow of your program; you decide when and how to use the library.

// Library Example: If you use a library to draw a shape, you call the librarys function whenever you want to draw.
// Framework Example: In a web framework, when a user visits a page, the framework automatically calls your function to handle that request.


// link and anchore tag:-
// Link Tag (<link>)
// Purpose: The <link> tag is used in the HTML documents <head> section to link external resources, such as stylesheets (CSS).
// Usage: It doesnt create a clickable link on the page. Instead, it tells the browser to load an external resource.
// EXAMPLE:-
// <link rel="stylesheet" href="styles.css">

// Anchor Tag (<a>)
// Purpose: The <a> tag (anchor tag) is used to create clickable links that can navigate to other pages or resources.
// Usage: It usually contains the href attribute, which specifies the URL or path to navigate to when the link is clicked.
// EXAMPLE:-
// <a href="https://www.example.com">Visit Example.com</a>


// Error boundary:-error boundary is a component that is used to catch the error in the child components tree and display a fallback UI instaed of crashing the whole component tree.


// what is redux?
// we can say it as a state container.
// Redux is a state management library commonly used with React (but it can be used with other frameworks or library(angular,value)too).
// Purpose: Redux helps you manage the state of your application in a centralized way. 
// This means you can keep track of your apps data in one place, making it easier to manage and debug.

// controll components:
// Definition: Controlled components are form elements (like <input>, <textarea>, etc.) whose values are controlled by React state. 
// How It Works: You set the value of the input to a state variable and update the state whenever the user types in the input.
// example:-
// import React, { useState } from 'react';

// function ControlledInput() {
//   const [value, setValue] = useState('');

//   const handleChange = (e) => {
//     setValue(e.target.value); // Update state on change
//   };

//   return (
//     <input type="text" value={value} onChange={handleChange} />
//   );
// }


// uncontrolled componnets:
// Definition: Uncontrolled components are form elements that store their own state internally. Instead of relying on React state, you access the input values using refs.
// How It Works: You dont manage the value with React state; instead, you get the value directly from the DOM when needed.
// Example:
// import React, { useRef } from 'react';

// function UncontrolledInput() {
//   const inputRef = useRef(null);

//   const handleSubmit = () => {
//     alert(Input value: ${inputRef.current.value}); // Access value using ref
//   };

//   return (
//     <div>
//       <input type="text" ref={inputRef} />
//       <button onClick={handleSubmit}>Submit</button>
//     </div>
//   );
// }


// // DRY CONCEPT:- dont repeat yourself


// PURE COMPONENTS:-
// Definition: Pure components are components that only re-render when their props or state change. They help improve performance by preventing unnecessary renders.
// When to Use:
// Performance Optimization
// Performance:
// Pure Components: Better for performance, especially in large applications.

// Impure componnents:-
// Definition: Impure components may re-render even if their props or state haven’t changed. They do not perform any optimizations.
// when to use:-
// Dynamic Data: Use impure components when the data they display is expected to change frequently or needs to re-render for any reason.
// performance:
// May lead to performance issues in complex applications.

// Expensive function:-function that takesa lof of time to execute.